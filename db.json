{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/assets/riven.png","path":"assets/riven.png","modified":0,"renderable":0},{"_id":"themes/yilia2/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia2/source/riven.png","path":"riven.png","modified":0,"renderable":1},{"_id":"themes/yilia2/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia2/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia2/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia2/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia2/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia2/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia2/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia2/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia2/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia2/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia2/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia2/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia2/_config.yml","hash":"a9f49ca867061eaa50d5d1c337c3b6b680db65a3","modified":1534599880618},{"_id":"source/_posts/排序算法.md","hash":"68ece415d3de7ccc5c89c884d1b82ed7817ac441","modified":1534869729662},{"_id":"source/assets/riven.png","hash":"9564bc357133b3c562ffe80a4c2f51610b2f137b","modified":1534599880618},{"_id":"themes/yilia2/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1534599880619},{"_id":"themes/yilia2/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1534599880619},{"_id":"themes/yilia2/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1534599880619},{"_id":"themes/yilia2/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1534599880619},{"_id":"themes/yilia2/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1534599880619},{"_id":"themes/yilia2/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1534599880620},{"_id":"themes/yilia2/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1534599880620},{"_id":"themes/yilia2/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1534599880626},{"_id":"themes/yilia2/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1534599880626},{"_id":"themes/yilia2/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1534599880626},{"_id":"themes/yilia2/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1534599880644},{"_id":"themes/yilia2/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1534599880626},{"_id":"themes/yilia2/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1534599880626},{"_id":"themes/yilia2/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1534599880627},{"_id":"themes/yilia2/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1534599880642},{"_id":"source/_posts/Hexo+GithubPages搭建博客.md","hash":"4e61e699402edf87dacfcf89b4a877e7bb3c65ed","modified":1534649915040},{"_id":"themes/yilia2/source/riven.png","hash":"9564bc357133b3c562ffe80a4c2f51610b2f137b","modified":1534599880643},{"_id":"themes/yilia2/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1534599880628},{"_id":"themes/yilia2/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1534599880644},{"_id":"themes/yilia2/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534599880625},{"_id":"themes/yilia2/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1534599880642},{"_id":"themes/yilia2/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1534599880643},{"_id":"themes/yilia2/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1534599880626},{"_id":"themes/yilia2/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1534599880627},{"_id":"themes/yilia2/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1534599880620},{"_id":"themes/yilia2/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1534599880620},{"_id":"themes/yilia2/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1534599880639},{"_id":"themes/yilia2/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1534599880621},{"_id":"themes/yilia2/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1534599880620},{"_id":"themes/yilia2/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1534599880621},{"_id":"themes/yilia2/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1534599880621},{"_id":"themes/yilia2/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1534599880621},{"_id":"themes/yilia2/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1534599880621},{"_id":"themes/yilia2/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1534599880621},{"_id":"themes/yilia2/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1534599880622},{"_id":"themes/yilia2/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1534599880622},{"_id":"themes/yilia2/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1534599880622},{"_id":"themes/yilia2/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1534599880622},{"_id":"themes/yilia2/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1534599880622},{"_id":"themes/yilia2/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1534599880625},{"_id":"themes/yilia2/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1534599880625},{"_id":"themes/yilia2/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1534599880639},{"_id":"themes/yilia2/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1534599880640},{"_id":"themes/yilia2/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1534599880640},{"_id":"themes/yilia2/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1534599880640},{"_id":"themes/yilia2/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1534599880641},{"_id":"themes/yilia2/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1534599880641},{"_id":"themes/yilia2/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1534599880641},{"_id":"themes/yilia2/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1534599880641},{"_id":"themes/yilia2/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1534599880641},{"_id":"themes/yilia2/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1534599880628},{"_id":"themes/yilia2/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1534599880629},{"_id":"themes/yilia2/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1534599880628},{"_id":"themes/yilia2/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1534599880628},{"_id":"themes/yilia2/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1534599880629},{"_id":"themes/yilia2/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1534599880629},{"_id":"themes/yilia2/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1534599880629},{"_id":"themes/yilia2/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1534599880629},{"_id":"themes/yilia2/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1534599880629},{"_id":"themes/yilia2/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1534599880632},{"_id":"themes/yilia2/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1534599880631},{"_id":"themes/yilia2/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1534599880633},{"_id":"themes/yilia2/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1534599880633},{"_id":"themes/yilia2/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1534599880633},{"_id":"themes/yilia2/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1534599880634},{"_id":"themes/yilia2/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1534599880634},{"_id":"themes/yilia2/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1534599880634},{"_id":"themes/yilia2/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1534599880634},{"_id":"themes/yilia2/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1534599880634},{"_id":"themes/yilia2/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1534599880635},{"_id":"themes/yilia2/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1534599880635},{"_id":"themes/yilia2/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1534599880635},{"_id":"themes/yilia2/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1534599880635},{"_id":"themes/yilia2/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1534599880635},{"_id":"themes/yilia2/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1534599880635},{"_id":"themes/yilia2/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1534599880636},{"_id":"themes/yilia2/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1534599880636},{"_id":"themes/yilia2/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1534599880637},{"_id":"themes/yilia2/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1534599880637},{"_id":"themes/yilia2/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1534599880637},{"_id":"themes/yilia2/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1534599880637},{"_id":"themes/yilia2/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1534599880637},{"_id":"themes/yilia2/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1534599880637},{"_id":"themes/yilia2/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1534599880638},{"_id":"themes/yilia2/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1534599880638},{"_id":"themes/yilia2/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1534599880638},{"_id":"themes/yilia2/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1534599880638},{"_id":"themes/yilia2/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1534599880639},{"_id":"themes/yilia2/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1534599880639},{"_id":"themes/yilia2/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1534599880625},{"_id":"themes/yilia2/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1534599880623},{"_id":"themes/yilia2/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1534599880623},{"_id":"themes/yilia2/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1534599880623},{"_id":"themes/yilia2/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1534599880623},{"_id":"themes/yilia2/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1534599880624},{"_id":"themes/yilia2/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1534599880624},{"_id":"themes/yilia2/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1534599880624},{"_id":"themes/yilia2/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1534599880623},{"_id":"themes/yilia2/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1534599880624},{"_id":"themes/yilia2/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1534599880623},{"_id":"themes/yilia2/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1534599880630},{"_id":"themes/yilia2/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1534599880630},{"_id":"themes/yilia2/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1534599880630},{"_id":"themes/yilia2/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1534599880631},{"_id":"themes/yilia2/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1534599880631},{"_id":"themes/yilia2/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1534599880632},{"_id":"themes/yilia2/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1534599880631},{"_id":"themes/yilia2/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1534599880633},{"_id":"themes/yilia2/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1534599880632},{"_id":"themes/yilia2/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1534599880632},{"_id":"themes/yilia2/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1534599880633},{"_id":"themes/yilia2/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1534599880633},{"_id":"public/content.json","hash":"52d11eaa53b4d0c1462a45454a29ae150f3e80ed","modified":1534869750852},{"_id":"public/2018/08/17/排序算法/index.html","hash":"4fa11537e91bbf7e72b7bea943338ae27211db8f","modified":1534869750950},{"_id":"public/2018/08/02/Hexo+GithubPages搭建博客/index.html","hash":"a155e0c8ed0d7b83519f2e32f94181df6725575e","modified":1534869750954},{"_id":"public/archives/index.html","hash":"06fb201579494b4c282715db791868ea19b82dcd","modified":1534869750954},{"_id":"public/archives/2018/08/index.html","hash":"0dbceb3d719ea0edd7a46f3b314d2a45a4294e69","modified":1534869750955},{"_id":"public/archives/2018/index.html","hash":"387d43fc6e1b3d9a4a8b7e3a20c771a7ff95f4ab","modified":1534869750955},{"_id":"public/index.html","hash":"989d2d584525dbf639c8c3f133a92a06c7787be9","modified":1534869750955},{"_id":"public/tags/coding/index.html","hash":"f28cf63be19d5bd6b62c72b37b88d8cabc2fbf0c","modified":1534869750955},{"_id":"public/tags/Java/index.html","hash":"30f1cb9b33ab80f71757b2688085e81464f7d46f","modified":1534869750955},{"_id":"public/tags/Python/index.html","hash":"45d57f61215973c6d3c62dbc660eb381dee1f437","modified":1534869750955},{"_id":"public/tags/排序算法/index.html","hash":"f7030c73c452e46043b3be8a97ca991796769c45","modified":1534869750955},{"_id":"public/tags/Github-Pages/index.html","hash":"3cbd641278acd0952188f579b69a0ba85ebd4f21","modified":1534869750955},{"_id":"public/tags/notes/index.html","hash":"45fa2474d22fccd252d3a3c565ff3187fb38be1c","modified":1534869750955},{"_id":"public/tags/Hexo/index.html","hash":"80f23ca5e6e9662dca62fc657e49f02e2373c67a","modified":1534869750979},{"_id":"public/assets/riven.png","hash":"9564bc357133b3c562ffe80a4c2f51610b2f137b","modified":1534869750981},{"_id":"public/riven.png","hash":"9564bc357133b3c562ffe80a4c2f51610b2f137b","modified":1534869750981},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1534869750981},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1534869750981},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1534869750981},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1534869750982},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1534869750982},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1534869750986},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1534869750986},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1534869750986},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1534869750986},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1534869750994},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1534869750994},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1534869750994},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1534869750994}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"排序算法","date":"2018-08-17T07:28:22.000Z","_content":"\n​\t在Java中，待排序的元素需要实现Comparable接口，该接口中有compareTo方法，可以用来判断两个元素的大小关系。排序算法的成本主要是比较和交换的次数，一个排序算法可以定义为如下形式：\n\n```java\npublic abstract class Sort<T extends Comparable>{\n    public abstract void sort(T[] obs);\n    protected boolean less(T a,T b){return a.compareTo(b)<0;};\n    protected void swap(T[] obs,int i,int j){\n        T tmp = obs[i];\n        obs[i] = obs[j];\n        obs[j] = tmp;\n    }\n}\n```\n\n\n\n<!--more-->\n\n#### 选择排序\n\n**基本思想**：选择数组中最小的元素，与数组的第一个元素交换位置。后续每第n步都选择剩余数组中最小的元素与第n个元素交换位置。每一步排好一个数。\n\n无论输入如何，都会进行同样的比较和交换，运行时间和输入无关。\n\nJava:\n\n```\nTODO\n```\n\nPython:\n\n```\nTODO\n```\n\n\n\n---\n\n#### 冒泡排序\n\n**基本思想**：从左到右不断交换相邻逆序的元素，一轮循环后可以将最大元素上浮至右侧。\n\n如果一轮循环中没有发生交换，则数组有序，退出循环。\n\nJava:\n\n```\nTODO\n```\n\nPython:\n\n```\nTODO\n```\n\n\n\n---\n\n#### 插入排序\n\n**基本思想**：每次将元素插入到左侧已经排序的数组中，使得左侧数组依然有序。\n\n每一次只交换相邻元素，只能使逆序减少1，因此逆序越少（本身已部分有序）的数组插入排序越快。大规模数组插入排序非常慢。\n\nJava:\n\n```\nTODO\n```\n\nPython:\n\n```\nTODO\n```\n\n\n\n---\n\n#### 希尔排序\n\n**基本思想**：改进插入排序每次只能使逆序减少1的局限性，通过交换不相邻元素，使得每一步减少的逆序数量大于1。\n\nJava:\n\n```\nTODO\n```\n\nPython:\n\n```\nTODO\n```\n\n\n\n---\n\n#### 归并排序\n\n**基本思想**：将序列拆分为排序好的两个子序列，然后归并起来，经典的分治思想。\n\n**归并**：将两个已经有序的子序列合并成一个有序序列。i，j分别为两个子序列的起始指针位置，从起始位置开始比较i ，j元素的大小。复制一份当前整个序列作为辅助序列，比较两个子序列i，j位置的元素，较小的存入最终结果序列。当其中一个子序列指针移到末尾，将另一个子序列的剩余元素放入结果序列末尾。详情见下Java代码。\n\n归并排序是稳定的排序，最好最坏的时间复杂度都为O(nlogn)。\n\nJava:\n\n```java\nimport java.util.Arrays;\npublic class MergeSort<T[] extends Comparable<T>>{\n    T[] tmp;\n    public void sort(T[] nums){\n        tmp = (T[]) new Comparable[nums.length];\n        sort(nums,0,nums.length-1)\n    }\n    private void sort(T[] nums,int l,int h){\n        if(h<=l)\n            return;\n        int mid = l + (h - l) / 2;\n        sort(nums,l,mid);\n        sort(nums,mid+1,h);\n        merge(nums,l,mid,h);\n    }\n    private void merge(int[] nums,int l,int m,int h){\n        int i = l,j = m + 1;\n        for(int k=l;k<=h;k++)\n            tmp[k] = nums[k];\n        for(int k=l;k<=h;k++){\n            if(i > m)\n                nums[k] = tmp[j++];\n            else if(j > h)\n                nums[k] = tmp[i++];\n            else if(tmp[i].compareTo(nums[j])<0)\n                nums[k] = tmp[i++];\n            else\n                nums[k] = tmp[j++];\n        }\n    }\n    public static void main(String[] args){\n        Integer[] nums = new Integer[]{6,5,8,7,1,4,2,3};\n        MergeSort ms = new MergeSort();\n        ms.sort();\n        System.out.println(Arrays.toString(nums));\n    }\n}\n//输出：[1, 2, 3, 4, 5, 6, 7, 8]\n```\n\nPython:\n\n```python\nclass MergeSort(object):\n    def __init__(self):\n        pass\n    def merge_sort(self,lists):\n        if len(lists) <= 1:\n            return lists\n        mid = int(len(lists)/2)\n        left = self.merge_sort(lists[:mid])\n        right = self.merge_sort(lists[mid:])\n        return merge(left,right)\n    def merge(self,left,right):\n        i,j = 0,0\n        result = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\nif __name__ == \"__main__\":\n    lists = [6,5,8,7,1,4,2,3]\n    ms = MergeSort()\n    result = ms.sort(lists)\n    print(result)\n#输出：[1, 2, 3, 4, 5, 6, 7, 8]\n```\n\n自顶向下：\n\n自底向上：\n\n\n\n---\n\n#### 快速排序\n\n**基本思想**：通过一个切分元素把数组分为两个子数组，左边子数组小于等于切分元素，右边子数组大于等于切分元素。将两个子数组排序则整体有序了。\n\n**切分元素**：选定位置，如：数组第一个元素，作为切分元素。指针i从左往右寻找第一个大于它的元素，指针j从右往左寻找第一个小于它的元素，交换这两个元素。不断进行该过程，指针i左边的元素都不大于切分元素，指针j右边的元素都大于切分元素，当i==j时，将切分元素交换到j位置。\n\n快速排序是原地排序，不需要额外的辅助数组（但是递归调用需要辅助栈）。最好情况：每次都将数组对半分，O(nlogn)。最坏情况：数组本来就是有序的，O(n^2^)。所以为了防止这种最坏的情况出现，排序前先把数组shuffle一下。\n\nJava:\n\n```java\npublic class QuickSort<T extends Comparable<T>>{\n    public void sort(T[] nums){\n        shuffle(nums);\n        sort(nums,0,nums.length-1);\n    }\n    private void sort(T[] nums,int l,int h){\n        if(l>=h)\n            return;\n        int j = partition(nums,l,h);\n        sort(nums,l,j-1);\n        sort(nums,j+1,h);\n    }\n    private void partition(T[] nums,int l,int h){\n        int i = l,j = h + 1;\n        T b = nums[l];\n        while(true){\n            while(less(nums[++i],b) && i != h);\n            while(less(b,nums[--j]) && j != l);\n            if(i >= j)\n                break;\n            swap(nums,i,j);\n        }\n        swap(nums,l,j);\n        return j;\n    }\n    private void shuffle(T[] nums){\n        List<Comparable> list = Arrays.asList(nums);\n        Collections.shuffle(nums);\n        list.toArray(nums);\n    }\n    private void swap(T[] nums,int i,int j){\n        T tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }\n    private boolean less(T a,T b){\n        return a.compareTo(b) < 0;\n    }\n    \n    public static void main(String[] args){\n        Integer[] nums = new Integer[]{6,5,8,7,1,4,2,3};\n        QuickSort qs = new QuickSort();\n        qs.sort(nums);\n        System.out.println(Arrays.toString(nums));\n    }\n}\n//输出：[1, 2, 3, 4, 5, 6, 7, 8]\n```\n\nPython:\n\n```python\nclass QuickSort(object):\n    def __init__(self):\n        pass\n    def sort(self,lists):\n        return self.quick_sort(lists,0,len(lists)-1)\n    def quick_sort(self,lists,left,right):\n        if left >= right:\n            return lists\n        key = lists[left]\n        low = left\n        high = right\n        while left < right:\n            while left < right and lists[right] >= key:\n                right -= 1\n            lists[left] = lists[right]\n            while left < right and lists[left] <= key:\n                left += 1\n            lists[right] = lists[left]\n        lists[right] = lists[key]\n        self.quick_sort(lists,low,left-1)\n        self.quick_sort(lists,left+1,high)\n        return lists\nif __name__ == \"__main__\":\n    nums = [6,5,8,7,1,4,2,3]\n    qs = QuickSort()\n    qs.sort(nums)\n    print(nums)\n#输出：[1, 2, 3, 4, 5, 6, 7, 8]\n```\n\n**算法改进**：\n\n1、小数组切换到插入排序，因为插入排序在数组较小时效率较高，快速排序因为会递归调用自己所以小数组时性能一般。\n\n2、三数取中，效果最好的切分元素为中位数。\n\n3、三向切分\n\n**快速选择算法**：利用partition函数，得到第K大元素。\n\n---\n\n#### 堆排序\n\n**基本思想**：堆的某个节点的值总是大于其子节点的值，并且是一颗完全二叉树，可以很容易存储在数组中。堆可以很容易地每次得到最大值，如果每次把最大元素和堆中数组的最后一个位置交换，可以得到一个有序序列。\n\n堆排序是原地排序，不占用额外空间。\n\nJava:\n\n```java\nimport java.util.Arrays;\npublic class HeapSort<T extends Comparable<T>>{\n    public void sort(T[] nums){\n        //构建堆\n        int N = nums.length - 1;\n        for(int k = N/2 - 1;k >= 0;k--)\n            sink(nums,k,N);\n        //把堆顶元素交换到末尾，并下沉维持剩余堆元素的有序状态\n        while (N > 0){\n            swap(nums,0,N--);\n            sink(nums,0,N);\n        }\n    }\n    public void sink(T[] nums,int k,int N){\n        while (2*k + 1 <= N){\n            int j = 2*k + 1;\n            if(j < N && less(nums,j,j+1))\n                j++;\n            if(!less(nums,k,j))\n                break;\n            swap(nums,k,j);\n            k = j;\n        }\n    }\n    public void swap(T[] nums,int i,int j){\n        T tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }\n    public boolean less(nums,int i,int j){\n        return nums[i].compareTo(nums[j]) < 0;\n    }\n    public static void main(String[] args){\n        Integer[] nums = new Integer[]{6,5,8,7,1,4,2,3};\n        HeapSort hs = new HeapSort();\n        hs.sort(nums);\n        System.out.println(Arrays.toString(nums));\n    }\n}\n//输出：[1, 2, 3, 4, 5, 6, 7, 8]\n```\n\nPython:\n\n```\nTODO\n```\n\n\n\n---\n\n#### 基数排序\n\n**基本思想**：\n\nJava:\n\n```\nTODO\n```\n\nPython:\n\n```\nTODO\n```\n\n\n\n---\n\n\n\n\n\n","source":"_posts/排序算法.md","raw":"---\ntitle: 排序算法\ndate: 2018-08-17 15:28:22\ntags: [coding,Java,Python,排序算法]\n---\n\n​\t在Java中，待排序的元素需要实现Comparable接口，该接口中有compareTo方法，可以用来判断两个元素的大小关系。排序算法的成本主要是比较和交换的次数，一个排序算法可以定义为如下形式：\n\n```java\npublic abstract class Sort<T extends Comparable>{\n    public abstract void sort(T[] obs);\n    protected boolean less(T a,T b){return a.compareTo(b)<0;};\n    protected void swap(T[] obs,int i,int j){\n        T tmp = obs[i];\n        obs[i] = obs[j];\n        obs[j] = tmp;\n    }\n}\n```\n\n\n\n<!--more-->\n\n#### 选择排序\n\n**基本思想**：选择数组中最小的元素，与数组的第一个元素交换位置。后续每第n步都选择剩余数组中最小的元素与第n个元素交换位置。每一步排好一个数。\n\n无论输入如何，都会进行同样的比较和交换，运行时间和输入无关。\n\nJava:\n\n```\nTODO\n```\n\nPython:\n\n```\nTODO\n```\n\n\n\n---\n\n#### 冒泡排序\n\n**基本思想**：从左到右不断交换相邻逆序的元素，一轮循环后可以将最大元素上浮至右侧。\n\n如果一轮循环中没有发生交换，则数组有序，退出循环。\n\nJava:\n\n```\nTODO\n```\n\nPython:\n\n```\nTODO\n```\n\n\n\n---\n\n#### 插入排序\n\n**基本思想**：每次将元素插入到左侧已经排序的数组中，使得左侧数组依然有序。\n\n每一次只交换相邻元素，只能使逆序减少1，因此逆序越少（本身已部分有序）的数组插入排序越快。大规模数组插入排序非常慢。\n\nJava:\n\n```\nTODO\n```\n\nPython:\n\n```\nTODO\n```\n\n\n\n---\n\n#### 希尔排序\n\n**基本思想**：改进插入排序每次只能使逆序减少1的局限性，通过交换不相邻元素，使得每一步减少的逆序数量大于1。\n\nJava:\n\n```\nTODO\n```\n\nPython:\n\n```\nTODO\n```\n\n\n\n---\n\n#### 归并排序\n\n**基本思想**：将序列拆分为排序好的两个子序列，然后归并起来，经典的分治思想。\n\n**归并**：将两个已经有序的子序列合并成一个有序序列。i，j分别为两个子序列的起始指针位置，从起始位置开始比较i ，j元素的大小。复制一份当前整个序列作为辅助序列，比较两个子序列i，j位置的元素，较小的存入最终结果序列。当其中一个子序列指针移到末尾，将另一个子序列的剩余元素放入结果序列末尾。详情见下Java代码。\n\n归并排序是稳定的排序，最好最坏的时间复杂度都为O(nlogn)。\n\nJava:\n\n```java\nimport java.util.Arrays;\npublic class MergeSort<T[] extends Comparable<T>>{\n    T[] tmp;\n    public void sort(T[] nums){\n        tmp = (T[]) new Comparable[nums.length];\n        sort(nums,0,nums.length-1)\n    }\n    private void sort(T[] nums,int l,int h){\n        if(h<=l)\n            return;\n        int mid = l + (h - l) / 2;\n        sort(nums,l,mid);\n        sort(nums,mid+1,h);\n        merge(nums,l,mid,h);\n    }\n    private void merge(int[] nums,int l,int m,int h){\n        int i = l,j = m + 1;\n        for(int k=l;k<=h;k++)\n            tmp[k] = nums[k];\n        for(int k=l;k<=h;k++){\n            if(i > m)\n                nums[k] = tmp[j++];\n            else if(j > h)\n                nums[k] = tmp[i++];\n            else if(tmp[i].compareTo(nums[j])<0)\n                nums[k] = tmp[i++];\n            else\n                nums[k] = tmp[j++];\n        }\n    }\n    public static void main(String[] args){\n        Integer[] nums = new Integer[]{6,5,8,7,1,4,2,3};\n        MergeSort ms = new MergeSort();\n        ms.sort();\n        System.out.println(Arrays.toString(nums));\n    }\n}\n//输出：[1, 2, 3, 4, 5, 6, 7, 8]\n```\n\nPython:\n\n```python\nclass MergeSort(object):\n    def __init__(self):\n        pass\n    def merge_sort(self,lists):\n        if len(lists) <= 1:\n            return lists\n        mid = int(len(lists)/2)\n        left = self.merge_sort(lists[:mid])\n        right = self.merge_sort(lists[mid:])\n        return merge(left,right)\n    def merge(self,left,right):\n        i,j = 0,0\n        result = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\nif __name__ == \"__main__\":\n    lists = [6,5,8,7,1,4,2,3]\n    ms = MergeSort()\n    result = ms.sort(lists)\n    print(result)\n#输出：[1, 2, 3, 4, 5, 6, 7, 8]\n```\n\n自顶向下：\n\n自底向上：\n\n\n\n---\n\n#### 快速排序\n\n**基本思想**：通过一个切分元素把数组分为两个子数组，左边子数组小于等于切分元素，右边子数组大于等于切分元素。将两个子数组排序则整体有序了。\n\n**切分元素**：选定位置，如：数组第一个元素，作为切分元素。指针i从左往右寻找第一个大于它的元素，指针j从右往左寻找第一个小于它的元素，交换这两个元素。不断进行该过程，指针i左边的元素都不大于切分元素，指针j右边的元素都大于切分元素，当i==j时，将切分元素交换到j位置。\n\n快速排序是原地排序，不需要额外的辅助数组（但是递归调用需要辅助栈）。最好情况：每次都将数组对半分，O(nlogn)。最坏情况：数组本来就是有序的，O(n^2^)。所以为了防止这种最坏的情况出现，排序前先把数组shuffle一下。\n\nJava:\n\n```java\npublic class QuickSort<T extends Comparable<T>>{\n    public void sort(T[] nums){\n        shuffle(nums);\n        sort(nums,0,nums.length-1);\n    }\n    private void sort(T[] nums,int l,int h){\n        if(l>=h)\n            return;\n        int j = partition(nums,l,h);\n        sort(nums,l,j-1);\n        sort(nums,j+1,h);\n    }\n    private void partition(T[] nums,int l,int h){\n        int i = l,j = h + 1;\n        T b = nums[l];\n        while(true){\n            while(less(nums[++i],b) && i != h);\n            while(less(b,nums[--j]) && j != l);\n            if(i >= j)\n                break;\n            swap(nums,i,j);\n        }\n        swap(nums,l,j);\n        return j;\n    }\n    private void shuffle(T[] nums){\n        List<Comparable> list = Arrays.asList(nums);\n        Collections.shuffle(nums);\n        list.toArray(nums);\n    }\n    private void swap(T[] nums,int i,int j){\n        T tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }\n    private boolean less(T a,T b){\n        return a.compareTo(b) < 0;\n    }\n    \n    public static void main(String[] args){\n        Integer[] nums = new Integer[]{6,5,8,7,1,4,2,3};\n        QuickSort qs = new QuickSort();\n        qs.sort(nums);\n        System.out.println(Arrays.toString(nums));\n    }\n}\n//输出：[1, 2, 3, 4, 5, 6, 7, 8]\n```\n\nPython:\n\n```python\nclass QuickSort(object):\n    def __init__(self):\n        pass\n    def sort(self,lists):\n        return self.quick_sort(lists,0,len(lists)-1)\n    def quick_sort(self,lists,left,right):\n        if left >= right:\n            return lists\n        key = lists[left]\n        low = left\n        high = right\n        while left < right:\n            while left < right and lists[right] >= key:\n                right -= 1\n            lists[left] = lists[right]\n            while left < right and lists[left] <= key:\n                left += 1\n            lists[right] = lists[left]\n        lists[right] = lists[key]\n        self.quick_sort(lists,low,left-1)\n        self.quick_sort(lists,left+1,high)\n        return lists\nif __name__ == \"__main__\":\n    nums = [6,5,8,7,1,4,2,3]\n    qs = QuickSort()\n    qs.sort(nums)\n    print(nums)\n#输出：[1, 2, 3, 4, 5, 6, 7, 8]\n```\n\n**算法改进**：\n\n1、小数组切换到插入排序，因为插入排序在数组较小时效率较高，快速排序因为会递归调用自己所以小数组时性能一般。\n\n2、三数取中，效果最好的切分元素为中位数。\n\n3、三向切分\n\n**快速选择算法**：利用partition函数，得到第K大元素。\n\n---\n\n#### 堆排序\n\n**基本思想**：堆的某个节点的值总是大于其子节点的值，并且是一颗完全二叉树，可以很容易存储在数组中。堆可以很容易地每次得到最大值，如果每次把最大元素和堆中数组的最后一个位置交换，可以得到一个有序序列。\n\n堆排序是原地排序，不占用额外空间。\n\nJava:\n\n```java\nimport java.util.Arrays;\npublic class HeapSort<T extends Comparable<T>>{\n    public void sort(T[] nums){\n        //构建堆\n        int N = nums.length - 1;\n        for(int k = N/2 - 1;k >= 0;k--)\n            sink(nums,k,N);\n        //把堆顶元素交换到末尾，并下沉维持剩余堆元素的有序状态\n        while (N > 0){\n            swap(nums,0,N--);\n            sink(nums,0,N);\n        }\n    }\n    public void sink(T[] nums,int k,int N){\n        while (2*k + 1 <= N){\n            int j = 2*k + 1;\n            if(j < N && less(nums,j,j+1))\n                j++;\n            if(!less(nums,k,j))\n                break;\n            swap(nums,k,j);\n            k = j;\n        }\n    }\n    public void swap(T[] nums,int i,int j){\n        T tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }\n    public boolean less(nums,int i,int j){\n        return nums[i].compareTo(nums[j]) < 0;\n    }\n    public static void main(String[] args){\n        Integer[] nums = new Integer[]{6,5,8,7,1,4,2,3};\n        HeapSort hs = new HeapSort();\n        hs.sort(nums);\n        System.out.println(Arrays.toString(nums));\n    }\n}\n//输出：[1, 2, 3, 4, 5, 6, 7, 8]\n```\n\nPython:\n\n```\nTODO\n```\n\n\n\n---\n\n#### 基数排序\n\n**基本思想**：\n\nJava:\n\n```\nTODO\n```\n\nPython:\n\n```\nTODO\n```\n\n\n\n---\n\n\n\n\n\n","slug":"排序算法","published":1,"updated":"2018-08-21T16:42:09.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3xtj2p0000sc44s286ng35","content":"<p>​    在Java中，待排序的元素需要实现Comparable接口，该接口中有compareTo方法，可以用来判断两个元素的大小关系。排序算法的成本主要是比较和交换的次数，一个排序算法可以定义为如下形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sort</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] obs)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(T a,T b)</span></span>&#123;<span class=\"keyword\">return</span> a.compareTo(b)&lt;<span class=\"number\">0</span>;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T[] obs,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        T tmp = obs[i];</span><br><span class=\"line\">        obs[i] = obs[j];</span><br><span class=\"line\">        obs[j] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h4><p><strong>基本思想</strong>：选择数组中最小的元素，与数组的第一个元素交换位置。后续每第n步都选择剩余数组中最小的元素与第n个元素交换位置。每一步排好一个数。</p>\n<p>无论输入如何，都会进行同样的比较和交换，运行时间和输入无关。</p>\n<p>Java:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p><strong>基本思想</strong>：从左到右不断交换相邻逆序的元素，一轮循环后可以将最大元素上浮至右侧。</p>\n<p>如果一轮循环中没有发生交换，则数组有序，退出循环。</p>\n<p>Java:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h4><p><strong>基本思想</strong>：每次将元素插入到左侧已经排序的数组中，使得左侧数组依然有序。</p>\n<p>每一次只交换相邻元素，只能使逆序减少1，因此逆序越少（本身已部分有序）的数组插入排序越快。大规模数组插入排序非常慢。</p>\n<p>Java:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h4><p><strong>基本思想</strong>：改进插入排序每次只能使逆序减少1的局限性，通过交换不相邻元素，使得每一步减少的逆序数量大于1。</p>\n<p>Java:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h4><p><strong>基本思想</strong>：将序列拆分为排序好的两个子序列，然后归并起来，经典的分治思想。</p>\n<p><strong>归并</strong>：将两个已经有序的子序列合并成一个有序序列。i，j分别为两个子序列的起始指针位置，从起始位置开始比较i ，j元素的大小。复制一份当前整个序列作为辅助序列，比较两个子序列i，j位置的元素，较小的存入最终结果序列。当其中一个子序列指针移到末尾，将另一个子序列的剩余元素放入结果序列末尾。详情见下Java代码。</p>\n<p>归并排序是稳定的排序，最好最坏的时间复杂度都为O(nlogn)。</p>\n<p>Java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\">public class MergeSort&lt;T[] extends Comparable&lt;T&gt;&gt;&#123;</span><br><span class=\"line\">    T[] tmp;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] nums)</span></span>&#123;</span><br><span class=\"line\">        tmp = (T[]) <span class=\"keyword\">new</span> Comparable[nums.length];</span><br><span class=\"line\">        sort(nums,<span class=\"number\">0</span>,nums.length-<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] nums,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> h)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h&lt;=l)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = l + (h - l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        sort(nums,l,mid);</span><br><span class=\"line\">        sort(nums,mid+<span class=\"number\">1</span>,h);</span><br><span class=\"line\">        merge(nums,l,mid,h);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span> h)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = l,j = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=l;k&lt;=h;k++)</span><br><span class=\"line\">            tmp[k] = nums[k];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=l;k&lt;=h;k++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt; m)</span><br><span class=\"line\">                nums[k] = tmp[j++];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j &gt; h)</span><br><span class=\"line\">                nums[k] = tmp[i++];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tmp[i].compareTo(nums[j])&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">                nums[k] = tmp[i++];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                nums[k] = tmp[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Integer[] nums = <span class=\"keyword\">new</span> Integer[]&#123;<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        MergeSort ms = <span class=\"keyword\">new</span> MergeSort();</span><br><span class=\"line\">        ms.sort();</span><br><span class=\"line\">        System.out.println(Arrays.toString(nums));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge_sort</span><span class=\"params\">(self,lists)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(lists) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lists</span><br><span class=\"line\">        mid = int(len(lists)/<span class=\"number\">2</span>)</span><br><span class=\"line\">        left = self.merge_sort(lists[:mid])</span><br><span class=\"line\">        right = self.merge_sort(lists[mid:])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> merge(left,right)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span><span class=\"params\">(self,left,right)</span>:</span></span><br><span class=\"line\">        i,j = <span class=\"number\">0</span>,<span class=\"number\">0</span></span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; len(left) <span class=\"keyword\">and</span> j &lt; len(right):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> left[i] &lt;= right[j]:</span><br><span class=\"line\">                result.append(left[i])</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                result.append(right[j])</span><br><span class=\"line\">                j += <span class=\"number\">1</span></span><br><span class=\"line\">        result += left[i:]</span><br><span class=\"line\">        result += right[j:]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    lists = [<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    ms = MergeSort()</span><br><span class=\"line\">    result = ms.sort(lists)</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\"><span class=\"comment\">#输出：[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<p>自顶向下：</p>\n<p>自底向上：</p>\n<hr>\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><p><strong>基本思想</strong>：通过一个切分元素把数组分为两个子数组，左边子数组小于等于切分元素，右边子数组大于等于切分元素。将两个子数组排序则整体有序了。</p>\n<p><strong>切分元素</strong>：选定位置，如：数组第一个元素，作为切分元素。指针i从左往右寻找第一个大于它的元素，指针j从右往左寻找第一个小于它的元素，交换这两个元素。不断进行该过程，指针i左边的元素都不大于切分元素，指针j右边的元素都大于切分元素，当i==j时，将切分元素交换到j位置。</p>\n<p>快速排序是原地排序，不需要额外的辅助数组（但是递归调用需要辅助栈）。最好情况：每次都将数组对半分，O(nlogn)。最坏情况：数组本来就是有序的，O(n^2^)。所以为了防止这种最坏的情况出现，排序前先把数组shuffle一下。</p>\n<p>Java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] nums)</span></span>&#123;</span><br><span class=\"line\">        shuffle(nums);</span><br><span class=\"line\">        sort(nums,<span class=\"number\">0</span>,nums.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] nums,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> h)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l&gt;=h)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = partition(nums,l,h);</span><br><span class=\"line\">        sort(nums,l,j-<span class=\"number\">1</span>);</span><br><span class=\"line\">        sort(nums,j+<span class=\"number\">1</span>,h);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">partition</span><span class=\"params\">(T[] nums,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> h)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = l,j = h + <span class=\"number\">1</span>;</span><br><span class=\"line\">        T b = nums[l];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(less(nums[++i],b) &amp;&amp; i != h);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(less(b,nums[--j]) &amp;&amp; j != l);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt;= j)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            swap(nums,i,j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(nums,l,j);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(T[] nums)</span></span>&#123;</span><br><span class=\"line\">        List&lt;Comparable&gt; list = Arrays.asList(nums);</span><br><span class=\"line\">        Collections.shuffle(nums);</span><br><span class=\"line\">        list.toArray(nums);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T[] nums,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        T tmp = nums[i];</span><br><span class=\"line\">        nums[i] = nums[j];</span><br><span class=\"line\">        nums[j] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(T a,T b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Integer[] nums = <span class=\"keyword\">new</span> Integer[]&#123;<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        QuickSort qs = <span class=\"keyword\">new</span> QuickSort();</span><br><span class=\"line\">        qs.sort(nums);</span><br><span class=\"line\">        System.out.println(Arrays.toString(nums));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort</span><span class=\"params\">(self,lists)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.quick_sort(lists,<span class=\"number\">0</span>,len(lists)<span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(self,lists,left,right)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> left &gt;= right:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lists</span><br><span class=\"line\">        key = lists[left]</span><br><span class=\"line\">        low = left</span><br><span class=\"line\">        high = right</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> lists[right] &gt;= key:</span><br><span class=\"line\">                right -= <span class=\"number\">1</span></span><br><span class=\"line\">            lists[left] = lists[right]</span><br><span class=\"line\">            <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> lists[left] &lt;= key:</span><br><span class=\"line\">                left += <span class=\"number\">1</span></span><br><span class=\"line\">            lists[right] = lists[left]</span><br><span class=\"line\">        lists[right] = lists[key]</span><br><span class=\"line\">        self.quick_sort(lists,low,left<span class=\"number\">-1</span>)</span><br><span class=\"line\">        self.quick_sort(lists,left+<span class=\"number\">1</span>,high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lists</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    nums = [<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    qs = QuickSort()</span><br><span class=\"line\">    qs.sort(nums)</span><br><span class=\"line\">    print(nums)</span><br><span class=\"line\"><span class=\"comment\">#输出：[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<p><strong>算法改进</strong>：</p>\n<p>1、小数组切换到插入排序，因为插入排序在数组较小时效率较高，快速排序因为会递归调用自己所以小数组时性能一般。</p>\n<p>2、三数取中，效果最好的切分元素为中位数。</p>\n<p>3、三向切分</p>\n<p><strong>快速选择算法</strong>：利用partition函数，得到第K大元素。</p>\n<hr>\n<h4 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h4><p><strong>基本思想</strong>：堆的某个节点的值总是大于其子节点的值，并且是一颗完全二叉树，可以很容易存储在数组中。堆可以很容易地每次得到最大值，如果每次把最大元素和堆中数组的最后一个位置交换，可以得到一个有序序列。</p>\n<p>堆排序是原地排序，不占用额外空间。</p>\n<p>Java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapSort</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] nums)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//构建堆</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> N = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = N/<span class=\"number\">2</span> - <span class=\"number\">1</span>;k &gt;= <span class=\"number\">0</span>;k--)</span><br><span class=\"line\">            sink(nums,k,N);</span><br><span class=\"line\">        <span class=\"comment\">//把堆顶元素交换到末尾，并下沉维持剩余堆元素的有序状态</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (N &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            swap(nums,<span class=\"number\">0</span>,N--);</span><br><span class=\"line\">            sink(nums,<span class=\"number\">0</span>,N);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(T[] nums,<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> N)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">2</span>*k + <span class=\"number\">1</span> &lt;= N)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">2</span>*k + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j &lt; N &amp;&amp; less(nums,j,j+<span class=\"number\">1</span>))</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!less(nums,k,j))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            swap(nums,k,j);</span><br><span class=\"line\">            k = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T[] nums,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        T tmp = nums[i];</span><br><span class=\"line\">        nums[i] = nums[j];</span><br><span class=\"line\">        nums[j] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(nums,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[i].compareTo(nums[j]) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Integer[] nums = <span class=\"keyword\">new</span> Integer[]&#123;<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        HeapSort hs = <span class=\"keyword\">new</span> HeapSort();</span><br><span class=\"line\">        hs.sort(nums);</span><br><span class=\"line\">        System.out.println(Arrays.toString(nums));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h4><p><strong>基本思想</strong>：</p>\n<p>Java:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{}},"excerpt":"<p>​    在Java中，待排序的元素需要实现Comparable接口，该接口中有compareTo方法，可以用来判断两个元素的大小关系。排序算法的成本主要是比较和交换的次数，一个排序算法可以定义为如下形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sort</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] obs)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(T a,T b)</span></span>&#123;<span class=\"keyword\">return</span> a.compareTo(b)&lt;<span class=\"number\">0</span>;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T[] obs,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        T tmp = obs[i];</span><br><span class=\"line\">        obs[i] = obs[j];</span><br><span class=\"line\">        obs[j] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h4><p><strong>基本思想</strong>：选择数组中最小的元素，与数组的第一个元素交换位置。后续每第n步都选择剩余数组中最小的元素与第n个元素交换位置。每一步排好一个数。</p>\n<p>无论输入如何，都会进行同样的比较和交换，运行时间和输入无关。</p>\n<p>Java:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p><strong>基本思想</strong>：从左到右不断交换相邻逆序的元素，一轮循环后可以将最大元素上浮至右侧。</p>\n<p>如果一轮循环中没有发生交换，则数组有序，退出循环。</p>\n<p>Java:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h4><p><strong>基本思想</strong>：每次将元素插入到左侧已经排序的数组中，使得左侧数组依然有序。</p>\n<p>每一次只交换相邻元素，只能使逆序减少1，因此逆序越少（本身已部分有序）的数组插入排序越快。大规模数组插入排序非常慢。</p>\n<p>Java:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h4><p><strong>基本思想</strong>：改进插入排序每次只能使逆序减少1的局限性，通过交换不相邻元素，使得每一步减少的逆序数量大于1。</p>\n<p>Java:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h4><p><strong>基本思想</strong>：将序列拆分为排序好的两个子序列，然后归并起来，经典的分治思想。</p>\n<p><strong>归并</strong>：将两个已经有序的子序列合并成一个有序序列。i，j分别为两个子序列的起始指针位置，从起始位置开始比较i ，j元素的大小。复制一份当前整个序列作为辅助序列，比较两个子序列i，j位置的元素，较小的存入最终结果序列。当其中一个子序列指针移到末尾，将另一个子序列的剩余元素放入结果序列末尾。详情见下Java代码。</p>\n<p>归并排序是稳定的排序，最好最坏的时间复杂度都为O(nlogn)。</p>\n<p>Java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\">public class MergeSort&lt;T[] extends Comparable&lt;T&gt;&gt;&#123;</span><br><span class=\"line\">    T[] tmp;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] nums)</span></span>&#123;</span><br><span class=\"line\">        tmp = (T[]) <span class=\"keyword\">new</span> Comparable[nums.length];</span><br><span class=\"line\">        sort(nums,<span class=\"number\">0</span>,nums.length-<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] nums,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> h)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h&lt;=l)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = l + (h - l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        sort(nums,l,mid);</span><br><span class=\"line\">        sort(nums,mid+<span class=\"number\">1</span>,h);</span><br><span class=\"line\">        merge(nums,l,mid,h);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span> h)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = l,j = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=l;k&lt;=h;k++)</span><br><span class=\"line\">            tmp[k] = nums[k];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=l;k&lt;=h;k++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt; m)</span><br><span class=\"line\">                nums[k] = tmp[j++];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j &gt; h)</span><br><span class=\"line\">                nums[k] = tmp[i++];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tmp[i].compareTo(nums[j])&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">                nums[k] = tmp[i++];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                nums[k] = tmp[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Integer[] nums = <span class=\"keyword\">new</span> Integer[]&#123;<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        MergeSort ms = <span class=\"keyword\">new</span> MergeSort();</span><br><span class=\"line\">        ms.sort();</span><br><span class=\"line\">        System.out.println(Arrays.toString(nums));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge_sort</span><span class=\"params\">(self,lists)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(lists) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lists</span><br><span class=\"line\">        mid = int(len(lists)/<span class=\"number\">2</span>)</span><br><span class=\"line\">        left = self.merge_sort(lists[:mid])</span><br><span class=\"line\">        right = self.merge_sort(lists[mid:])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> merge(left,right)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span><span class=\"params\">(self,left,right)</span>:</span></span><br><span class=\"line\">        i,j = <span class=\"number\">0</span>,<span class=\"number\">0</span></span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; len(left) <span class=\"keyword\">and</span> j &lt; len(right):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> left[i] &lt;= right[j]:</span><br><span class=\"line\">                result.append(left[i])</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                result.append(right[j])</span><br><span class=\"line\">                j += <span class=\"number\">1</span></span><br><span class=\"line\">        result += left[i:]</span><br><span class=\"line\">        result += right[j:]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    lists = [<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    ms = MergeSort()</span><br><span class=\"line\">    result = ms.sort(lists)</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\"><span class=\"comment\">#输出：[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<p>自顶向下：</p>\n<p>自底向上：</p>\n<hr>\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><p><strong>基本思想</strong>：通过一个切分元素把数组分为两个子数组，左边子数组小于等于切分元素，右边子数组大于等于切分元素。将两个子数组排序则整体有序了。</p>\n<p><strong>切分元素</strong>：选定位置，如：数组第一个元素，作为切分元素。指针i从左往右寻找第一个大于它的元素，指针j从右往左寻找第一个小于它的元素，交换这两个元素。不断进行该过程，指针i左边的元素都不大于切分元素，指针j右边的元素都大于切分元素，当i==j时，将切分元素交换到j位置。</p>\n<p>快速排序是原地排序，不需要额外的辅助数组（但是递归调用需要辅助栈）。最好情况：每次都将数组对半分，O(nlogn)。最坏情况：数组本来就是有序的，O(n^2^)。所以为了防止这种最坏的情况出现，排序前先把数组shuffle一下。</p>\n<p>Java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] nums)</span></span>&#123;</span><br><span class=\"line\">        shuffle(nums);</span><br><span class=\"line\">        sort(nums,<span class=\"number\">0</span>,nums.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] nums,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> h)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l&gt;=h)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = partition(nums,l,h);</span><br><span class=\"line\">        sort(nums,l,j-<span class=\"number\">1</span>);</span><br><span class=\"line\">        sort(nums,j+<span class=\"number\">1</span>,h);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">partition</span><span class=\"params\">(T[] nums,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> h)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = l,j = h + <span class=\"number\">1</span>;</span><br><span class=\"line\">        T b = nums[l];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(less(nums[++i],b) &amp;&amp; i != h);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(less(b,nums[--j]) &amp;&amp; j != l);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt;= j)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            swap(nums,i,j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(nums,l,j);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(T[] nums)</span></span>&#123;</span><br><span class=\"line\">        List&lt;Comparable&gt; list = Arrays.asList(nums);</span><br><span class=\"line\">        Collections.shuffle(nums);</span><br><span class=\"line\">        list.toArray(nums);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T[] nums,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        T tmp = nums[i];</span><br><span class=\"line\">        nums[i] = nums[j];</span><br><span class=\"line\">        nums[j] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(T a,T b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.compareTo(b) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Integer[] nums = <span class=\"keyword\">new</span> Integer[]&#123;<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        QuickSort qs = <span class=\"keyword\">new</span> QuickSort();</span><br><span class=\"line\">        qs.sort(nums);</span><br><span class=\"line\">        System.out.println(Arrays.toString(nums));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort</span><span class=\"params\">(self,lists)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.quick_sort(lists,<span class=\"number\">0</span>,len(lists)<span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(self,lists,left,right)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> left &gt;= right:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lists</span><br><span class=\"line\">        key = lists[left]</span><br><span class=\"line\">        low = left</span><br><span class=\"line\">        high = right</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> lists[right] &gt;= key:</span><br><span class=\"line\">                right -= <span class=\"number\">1</span></span><br><span class=\"line\">            lists[left] = lists[right]</span><br><span class=\"line\">            <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> lists[left] &lt;= key:</span><br><span class=\"line\">                left += <span class=\"number\">1</span></span><br><span class=\"line\">            lists[right] = lists[left]</span><br><span class=\"line\">        lists[right] = lists[key]</span><br><span class=\"line\">        self.quick_sort(lists,low,left<span class=\"number\">-1</span>)</span><br><span class=\"line\">        self.quick_sort(lists,left+<span class=\"number\">1</span>,high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lists</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    nums = [<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    qs = QuickSort()</span><br><span class=\"line\">    qs.sort(nums)</span><br><span class=\"line\">    print(nums)</span><br><span class=\"line\"><span class=\"comment\">#输出：[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<p><strong>算法改进</strong>：</p>\n<p>1、小数组切换到插入排序，因为插入排序在数组较小时效率较高，快速排序因为会递归调用自己所以小数组时性能一般。</p>\n<p>2、三数取中，效果最好的切分元素为中位数。</p>\n<p>3、三向切分</p>\n<p><strong>快速选择算法</strong>：利用partition函数，得到第K大元素。</p>\n<hr>\n<h4 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h4><p><strong>基本思想</strong>：堆的某个节点的值总是大于其子节点的值，并且是一颗完全二叉树，可以很容易存储在数组中。堆可以很容易地每次得到最大值，如果每次把最大元素和堆中数组的最后一个位置交换，可以得到一个有序序列。</p>\n<p>堆排序是原地排序，不占用额外空间。</p>\n<p>Java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapSort</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] nums)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//构建堆</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> N = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = N/<span class=\"number\">2</span> - <span class=\"number\">1</span>;k &gt;= <span class=\"number\">0</span>;k--)</span><br><span class=\"line\">            sink(nums,k,N);</span><br><span class=\"line\">        <span class=\"comment\">//把堆顶元素交换到末尾，并下沉维持剩余堆元素的有序状态</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (N &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            swap(nums,<span class=\"number\">0</span>,N--);</span><br><span class=\"line\">            sink(nums,<span class=\"number\">0</span>,N);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(T[] nums,<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> N)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">2</span>*k + <span class=\"number\">1</span> &lt;= N)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">2</span>*k + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j &lt; N &amp;&amp; less(nums,j,j+<span class=\"number\">1</span>))</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!less(nums,k,j))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            swap(nums,k,j);</span><br><span class=\"line\">            k = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T[] nums,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        T tmp = nums[i];</span><br><span class=\"line\">        nums[i] = nums[j];</span><br><span class=\"line\">        nums[j] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(nums,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[i].compareTo(nums[j]) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Integer[] nums = <span class=\"keyword\">new</span> Integer[]&#123;<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        HeapSort hs = <span class=\"keyword\">new</span> HeapSort();</span><br><span class=\"line\">        hs.sort(nums);</span><br><span class=\"line\">        System.out.println(Arrays.toString(nums));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出：[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h4><p><strong>基本思想</strong>：</p>\n<p>Java:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<p>Python:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TODO</span><br></pre></td></tr></table></figure>\n<hr>"},{"title":"Hexo+GithubPages搭建博客","date":"2018-08-02T13:17:37.000Z","_content":"​\t本博客搭建流程，Ctrl CV 就能拥有 。。。\n\n<!--more-->\n\n#  一、安装Node.js、Hexo\n\n​\tUbuntu、Mac、Win下的安装都大同小异\n\n```bash\n$ sudo apt-get install node.js\n$ sudo apt-get install npm   #一种包管理工具\n$ sudo npm install -g hexo\n\n$ node -v\n$ hexo -v  #输出相应的版本即安装成功\n```\n# 二、Git相关配置\n\n## 1、创建一个**username.github.io**的repository\n\n## 2、配置ssh key\n\n- 打开bash\n\n```bash\n$ ssh-keygen -t rsa -C \"xxxx@xx.xx\" \n# 一路回车\n```\n\n- 打开用户目录下的*~/.ssh/*目录，目录下文件id_rsa为私钥，id_rsa.pub为公钥。复制id_rsa.pub里面的内容\n- 打开Github->Settings->SSH and GPG keys->new SSH key，取好别名，粘贴秘钥，回到bash\n\n```bash\n$ ssh -T git@github.com    #如果输出hello。。。字样，表示配置成功\n```\n\n若同一电脑需要用到多个sshkey，则还需如下操作：\n\n```bash\n$ ssh-keygen -t rsa -f ~/.ssh/id_rsa.xx -C \"xxx@xx.xx\"   #生成另外一个带别名的key\n$ ssh-add ~/.ssh/id_rsa.xx  #添加新的ssh key到ssh agent，其默认只读id_rsa\n$ touch config  #创建多个key的配置文件\n```\n\n已同时配置gitlab和github的key为例，config文件中写入如下信息\n\n```reStructuredText\nHost github\nHostName github.com\nUser git\nIdentityFile ~.ssh/id_rsa.github\n\nHost gitlab\nHostName gitlab.com\nUser git\nIdentityFile ~.ssh/id_rsa.gitlab\n```\n\n编写完成后同样可以如前所述 *“ssh -T xxx”* 检查是否配置成功\n\n## 3、Git常规配置\n\n```bash\n$ git config --list     #查看config信息\n$ git config --global user.name \"xxx\"    \n$ git config --global user.email \"xxx@xxx.xx\"\n```\n\n如果须有某个文件夹下单独配置，--global改为--local即可\n\n# 三、搭建博客开启写作之旅\n\n### 搭建流程\n\n​\tHexo搭建博客后部署到Github，如果我们需要把我们原始文件也存到Github便于我们后续在不同电脑更改，理论上我们需要一个库部署，一个库来存储我们的原始文件。这里我们通过建立不同的分支来实现。\n\n```bash\n$ git clone git@github.com:xxx/xxx.github.io.git\n$ git branch hexo\n$ git checkout hexo\n```\n\n​\t我们可以把hexo分支设置为默认分支，打开项目的settings->Branches->Default Branch更改即可。因为后续更改只会发生在hexo分支，master分支仅起部署作用。\n\n接着，我们操作Hexo：\n\n于hexo分支下，\n\n```bash\n$ hexo init  #只有空文件夹时需要这句代码\n$ npm install hexo-deployer-git\n$ hexo g  #generate,生成静态网页\n$ hexo s  #server,本地预览http://localhost:4000/\n```\n\n博客的配置文件为_config.yml，关于部署的配置如下：\n\n```\ndeploy:\n  type: git\n  repository: git@github.com:xxx/xxx.github.io.git\n  branch: master\n```\n\n其他配置参考注释。。\n\n重新生成部署：\n\n```bash\n$hexo clean\n$ hexo g\n$ hexo d  #deploy\n```\n\n此时，打开<https://xxx.github.io/>即可访问博客。\n\n开启写作之旅：\n\n```bash\n$ hexo n \"xxx\"  #new,命令执行后，在/source/_posts下回产生一个xxx.md文件\n```\n\n修改完后，push到hexo分支：\n\n```bash\n$ git add .\n$ git commit -m \"xxx\"\n$ git push origin hexo  #-f强行push\n```\n\n如需在其他机器写作，git clone下来即可\n\n### 坑点记录\n\n- **修改配置_config.yml文件时，记得配置项之前加空格**\n\n  比如：title: *<-这个地方必须有空格*Pamper'Blog\n\n- 当我们在多台机器上修改博客，产生修改不一致的情况时，可以强制某台机器本地同步git上的代码：\n\n```bash\n$ git fetch --all\n$ git reset --hard origin/hexo\n$ git pull\n```\n\n- 添加.gitignore忽略某些文件，如.DS_Store，.deploy_git，如果发现.gitignore没起作用，清除一下git缓存即可：\n\n```bash\n$ git rm -r --cached .\n$ git add .\n$ git commit -m \"update .gitignore\"\n$ git push origin hexo\n```\n\n # 四、主题配置\n\n​\t配置文件_config.yml中有主题配置选项theme，将心仪的主题clone到themes文件夹下，修改配置重新部署即可应用主题，主题基本配置同样主题文件夹下的 _config.yml配置。\n\n​\t本博客采用[yilia](https://github.com/litten/hexo-theme-yilia)主题\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Hexo+GithubPages搭建博客.md","raw":"---\ntitle: Hexo+GithubPages搭建博客\ndate: 2018-08-02 21:17:37\ntags: [notes,Github Pages,Hexo]\n---\n​\t本博客搭建流程，Ctrl CV 就能拥有 。。。\n\n<!--more-->\n\n#  一、安装Node.js、Hexo\n\n​\tUbuntu、Mac、Win下的安装都大同小异\n\n```bash\n$ sudo apt-get install node.js\n$ sudo apt-get install npm   #一种包管理工具\n$ sudo npm install -g hexo\n\n$ node -v\n$ hexo -v  #输出相应的版本即安装成功\n```\n# 二、Git相关配置\n\n## 1、创建一个**username.github.io**的repository\n\n## 2、配置ssh key\n\n- 打开bash\n\n```bash\n$ ssh-keygen -t rsa -C \"xxxx@xx.xx\" \n# 一路回车\n```\n\n- 打开用户目录下的*~/.ssh/*目录，目录下文件id_rsa为私钥，id_rsa.pub为公钥。复制id_rsa.pub里面的内容\n- 打开Github->Settings->SSH and GPG keys->new SSH key，取好别名，粘贴秘钥，回到bash\n\n```bash\n$ ssh -T git@github.com    #如果输出hello。。。字样，表示配置成功\n```\n\n若同一电脑需要用到多个sshkey，则还需如下操作：\n\n```bash\n$ ssh-keygen -t rsa -f ~/.ssh/id_rsa.xx -C \"xxx@xx.xx\"   #生成另外一个带别名的key\n$ ssh-add ~/.ssh/id_rsa.xx  #添加新的ssh key到ssh agent，其默认只读id_rsa\n$ touch config  #创建多个key的配置文件\n```\n\n已同时配置gitlab和github的key为例，config文件中写入如下信息\n\n```reStructuredText\nHost github\nHostName github.com\nUser git\nIdentityFile ~.ssh/id_rsa.github\n\nHost gitlab\nHostName gitlab.com\nUser git\nIdentityFile ~.ssh/id_rsa.gitlab\n```\n\n编写完成后同样可以如前所述 *“ssh -T xxx”* 检查是否配置成功\n\n## 3、Git常规配置\n\n```bash\n$ git config --list     #查看config信息\n$ git config --global user.name \"xxx\"    \n$ git config --global user.email \"xxx@xxx.xx\"\n```\n\n如果须有某个文件夹下单独配置，--global改为--local即可\n\n# 三、搭建博客开启写作之旅\n\n### 搭建流程\n\n​\tHexo搭建博客后部署到Github，如果我们需要把我们原始文件也存到Github便于我们后续在不同电脑更改，理论上我们需要一个库部署，一个库来存储我们的原始文件。这里我们通过建立不同的分支来实现。\n\n```bash\n$ git clone git@github.com:xxx/xxx.github.io.git\n$ git branch hexo\n$ git checkout hexo\n```\n\n​\t我们可以把hexo分支设置为默认分支，打开项目的settings->Branches->Default Branch更改即可。因为后续更改只会发生在hexo分支，master分支仅起部署作用。\n\n接着，我们操作Hexo：\n\n于hexo分支下，\n\n```bash\n$ hexo init  #只有空文件夹时需要这句代码\n$ npm install hexo-deployer-git\n$ hexo g  #generate,生成静态网页\n$ hexo s  #server,本地预览http://localhost:4000/\n```\n\n博客的配置文件为_config.yml，关于部署的配置如下：\n\n```\ndeploy:\n  type: git\n  repository: git@github.com:xxx/xxx.github.io.git\n  branch: master\n```\n\n其他配置参考注释。。\n\n重新生成部署：\n\n```bash\n$hexo clean\n$ hexo g\n$ hexo d  #deploy\n```\n\n此时，打开<https://xxx.github.io/>即可访问博客。\n\n开启写作之旅：\n\n```bash\n$ hexo n \"xxx\"  #new,命令执行后，在/source/_posts下回产生一个xxx.md文件\n```\n\n修改完后，push到hexo分支：\n\n```bash\n$ git add .\n$ git commit -m \"xxx\"\n$ git push origin hexo  #-f强行push\n```\n\n如需在其他机器写作，git clone下来即可\n\n### 坑点记录\n\n- **修改配置_config.yml文件时，记得配置项之前加空格**\n\n  比如：title: *<-这个地方必须有空格*Pamper'Blog\n\n- 当我们在多台机器上修改博客，产生修改不一致的情况时，可以强制某台机器本地同步git上的代码：\n\n```bash\n$ git fetch --all\n$ git reset --hard origin/hexo\n$ git pull\n```\n\n- 添加.gitignore忽略某些文件，如.DS_Store，.deploy_git，如果发现.gitignore没起作用，清除一下git缓存即可：\n\n```bash\n$ git rm -r --cached .\n$ git add .\n$ git commit -m \"update .gitignore\"\n$ git push origin hexo\n```\n\n # 四、主题配置\n\n​\t配置文件_config.yml中有主题配置选项theme，将心仪的主题clone到themes文件夹下，修改配置重新部署即可应用主题，主题基本配置同样主题文件夹下的 _config.yml配置。\n\n​\t本博客采用[yilia](https://github.com/litten/hexo-theme-yilia)主题\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Hexo+GithubPages搭建博客","published":1,"updated":"2018-08-19T03:38:35.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl3xtj2t0001sc44uzhcss4c","content":"<p>​    本博客搭建流程，Ctrl CV 就能拥有 。。。</p>\n<a id=\"more\"></a>\n<h1 id=\"一、安装Node-js、Hexo\"><a href=\"#一、安装Node-js、Hexo\" class=\"headerlink\" title=\"一、安装Node.js、Hexo\"></a>一、安装Node.js、Hexo</h1><p>​    Ubuntu、Mac、Win下的安装都大同小异</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install node.js</span><br><span class=\"line\">$ sudo apt-get install npm   <span class=\"comment\">#一种包管理工具</span></span><br><span class=\"line\">$ sudo npm install -g hexo</span><br><span class=\"line\"></span><br><span class=\"line\">$ node -v</span><br><span class=\"line\">$ hexo -v  <span class=\"comment\">#输出相应的版本即安装成功</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"二、Git相关配置\"><a href=\"#二、Git相关配置\" class=\"headerlink\" title=\"二、Git相关配置\"></a>二、Git相关配置</h1><h2 id=\"1、创建一个username-github-io的repository\"><a href=\"#1、创建一个username-github-io的repository\" class=\"headerlink\" title=\"1、创建一个username.github.io的repository\"></a>1、创建一个<strong>username.github.io</strong>的repository</h2><h2 id=\"2、配置ssh-key\"><a href=\"#2、配置ssh-key\" class=\"headerlink\" title=\"2、配置ssh key\"></a>2、配置ssh key</h2><ul>\n<li>打开bash</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"xxxx@xx.xx\"</span> </span><br><span class=\"line\"><span class=\"comment\"># 一路回车</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>打开用户目录下的<em>~/.ssh/</em>目录，目录下文件id_rsa为私钥，id_rsa.pub为公钥。复制id_rsa.pub里面的内容</li>\n<li>打开Github-&gt;Settings-&gt;SSH and GPG keys-&gt;new SSH key，取好别名，粘贴秘钥，回到bash</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com    <span class=\"comment\">#如果输出hello。。。字样，表示配置成功</span></span><br></pre></td></tr></table></figure>\n<p>若同一电脑需要用到多个sshkey，则还需如下操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -f ~/.ssh/id_rsa.xx -C <span class=\"string\">\"xxx@xx.xx\"</span>   <span class=\"comment\">#生成另外一个带别名的key</span></span><br><span class=\"line\">$ ssh-add ~/.ssh/id_rsa.xx  <span class=\"comment\">#添加新的ssh key到ssh agent，其默认只读id_rsa</span></span><br><span class=\"line\">$ touch config  <span class=\"comment\">#创建多个key的配置文件</span></span><br></pre></td></tr></table></figure>\n<p>已同时配置gitlab和github的key为例，config文件中写入如下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github</span><br><span class=\"line\">HostName github.com</span><br><span class=\"line\">User git</span><br><span class=\"line\">IdentityFile ~.ssh/id_rsa.github</span><br><span class=\"line\"></span><br><span class=\"line\">Host gitlab</span><br><span class=\"line\">HostName gitlab.com</span><br><span class=\"line\">User git</span><br><span class=\"line\">IdentityFile ~.ssh/id_rsa.gitlab</span><br></pre></td></tr></table></figure>\n<p>编写完成后同样可以如前所述 <em>“ssh -T xxx”</em> 检查是否配置成功</p>\n<h2 id=\"3、Git常规配置\"><a href=\"#3、Git常规配置\" class=\"headerlink\" title=\"3、Git常规配置\"></a>3、Git常规配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list     <span class=\"comment\">#查看config信息</span></span><br><span class=\"line\">$ git config --global user.name <span class=\"string\">\"xxx\"</span>    </span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"xxx@xxx.xx\"</span></span><br></pre></td></tr></table></figure>\n<p>如果须有某个文件夹下单独配置，–global改为–local即可</p>\n<h1 id=\"三、搭建博客开启写作之旅\"><a href=\"#三、搭建博客开启写作之旅\" class=\"headerlink\" title=\"三、搭建博客开启写作之旅\"></a>三、搭建博客开启写作之旅</h1><h3 id=\"搭建流程\"><a href=\"#搭建流程\" class=\"headerlink\" title=\"搭建流程\"></a>搭建流程</h3><p>​    Hexo搭建博客后部署到Github，如果我们需要把我们原始文件也存到Github便于我们后续在不同电脑更改，理论上我们需要一个库部署，一个库来存储我们的原始文件。这里我们通过建立不同的分支来实现。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:xxx/xxx.github.io.git</span><br><span class=\"line\">$ git branch hexo</span><br><span class=\"line\">$ git checkout hexo</span><br></pre></td></tr></table></figure>\n<p>​    我们可以把hexo分支设置为默认分支，打开项目的settings-&gt;Branches-&gt;Default Branch更改即可。因为后续更改只会发生在hexo分支，master分支仅起部署作用。</p>\n<p>接着，我们操作Hexo：</p>\n<p>于hexo分支下，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init  <span class=\"comment\">#只有空文件夹时需要这句代码</span></span><br><span class=\"line\">$ npm install hexo-deployer-git</span><br><span class=\"line\">$ hexo g  <span class=\"comment\">#generate,生成静态网页</span></span><br><span class=\"line\">$ hexo s  <span class=\"comment\">#server,本地预览http://localhost:4000/</span></span><br></pre></td></tr></table></figure>\n<p>博客的配置文件为_config.yml，关于部署的配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:xxx/xxx.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>其他配置参考注释。。</p>\n<p>重新生成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$hexo</span> clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d  <span class=\"comment\">#deploy</span></span><br></pre></td></tr></table></figure>\n<p>此时，打开<a href=\"https://xxx.github.io/\" target=\"_blank\" rel=\"noopener\">https://xxx.github.io/</a>即可访问博客。</p>\n<p>开启写作之旅：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo n <span class=\"string\">\"xxx\"</span>  <span class=\"comment\">#new,命令执行后，在/source/_posts下回产生一个xxx.md文件</span></span><br></pre></td></tr></table></figure>\n<p>修改完后，push到hexo分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">$ git push origin hexo  <span class=\"comment\">#-f强行push</span></span><br></pre></td></tr></table></figure>\n<p>如需在其他机器写作，git clone下来即可</p>\n<h3 id=\"坑点记录\"><a href=\"#坑点记录\" class=\"headerlink\" title=\"坑点记录\"></a>坑点记录</h3><ul>\n<li><p><strong>修改配置_config.yml文件时，记得配置项之前加空格</strong></p>\n<p>比如：title: <em>&lt;-这个地方必须有空格</em>Pamper’Blog</p>\n</li>\n<li><p>当我们在多台机器上修改博客，产生修改不一致的情况时，可以强制某台机器本地同步git上的代码：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch --all</span><br><span class=\"line\">$ git reset --hard origin/hexo</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加.gitignore忽略某些文件，如.DS_Store，.deploy_git，如果发现.gitignore没起作用，清除一下git缓存即可：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm -r --cached .</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"update .gitignore\"</span></span><br><span class=\"line\">$ git push origin hexo</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、主题配置\"><a href=\"#四、主题配置\" class=\"headerlink\" title=\"四、主题配置\"></a>四、主题配置</h1><p>​    配置文件_config.yml中有主题配置选项theme，将心仪的主题clone到themes文件夹下，修改配置重新部署即可应用主题，主题基本配置同样主题文件夹下的 _config.yml配置。</p>\n<p>​    本博客采用<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">yilia</a>主题</p>\n","site":{"data":{}},"excerpt":"<p>​    本博客搭建流程，Ctrl CV 就能拥有 。。。</p>","more":"<h1 id=\"一、安装Node-js、Hexo\"><a href=\"#一、安装Node-js、Hexo\" class=\"headerlink\" title=\"一、安装Node.js、Hexo\"></a>一、安装Node.js、Hexo</h1><p>​    Ubuntu、Mac、Win下的安装都大同小异</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install node.js</span><br><span class=\"line\">$ sudo apt-get install npm   <span class=\"comment\">#一种包管理工具</span></span><br><span class=\"line\">$ sudo npm install -g hexo</span><br><span class=\"line\"></span><br><span class=\"line\">$ node -v</span><br><span class=\"line\">$ hexo -v  <span class=\"comment\">#输出相应的版本即安装成功</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"二、Git相关配置\"><a href=\"#二、Git相关配置\" class=\"headerlink\" title=\"二、Git相关配置\"></a>二、Git相关配置</h1><h2 id=\"1、创建一个username-github-io的repository\"><a href=\"#1、创建一个username-github-io的repository\" class=\"headerlink\" title=\"1、创建一个username.github.io的repository\"></a>1、创建一个<strong>username.github.io</strong>的repository</h2><h2 id=\"2、配置ssh-key\"><a href=\"#2、配置ssh-key\" class=\"headerlink\" title=\"2、配置ssh key\"></a>2、配置ssh key</h2><ul>\n<li>打开bash</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"xxxx@xx.xx\"</span> </span><br><span class=\"line\"><span class=\"comment\"># 一路回车</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>打开用户目录下的<em>~/.ssh/</em>目录，目录下文件id_rsa为私钥，id_rsa.pub为公钥。复制id_rsa.pub里面的内容</li>\n<li>打开Github-&gt;Settings-&gt;SSH and GPG keys-&gt;new SSH key，取好别名，粘贴秘钥，回到bash</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com    <span class=\"comment\">#如果输出hello。。。字样，表示配置成功</span></span><br></pre></td></tr></table></figure>\n<p>若同一电脑需要用到多个sshkey，则还需如下操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -f ~/.ssh/id_rsa.xx -C <span class=\"string\">\"xxx@xx.xx\"</span>   <span class=\"comment\">#生成另外一个带别名的key</span></span><br><span class=\"line\">$ ssh-add ~/.ssh/id_rsa.xx  <span class=\"comment\">#添加新的ssh key到ssh agent，其默认只读id_rsa</span></span><br><span class=\"line\">$ touch config  <span class=\"comment\">#创建多个key的配置文件</span></span><br></pre></td></tr></table></figure>\n<p>已同时配置gitlab和github的key为例，config文件中写入如下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github</span><br><span class=\"line\">HostName github.com</span><br><span class=\"line\">User git</span><br><span class=\"line\">IdentityFile ~.ssh/id_rsa.github</span><br><span class=\"line\"></span><br><span class=\"line\">Host gitlab</span><br><span class=\"line\">HostName gitlab.com</span><br><span class=\"line\">User git</span><br><span class=\"line\">IdentityFile ~.ssh/id_rsa.gitlab</span><br></pre></td></tr></table></figure>\n<p>编写完成后同样可以如前所述 <em>“ssh -T xxx”</em> 检查是否配置成功</p>\n<h2 id=\"3、Git常规配置\"><a href=\"#3、Git常规配置\" class=\"headerlink\" title=\"3、Git常规配置\"></a>3、Git常规配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list     <span class=\"comment\">#查看config信息</span></span><br><span class=\"line\">$ git config --global user.name <span class=\"string\">\"xxx\"</span>    </span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"xxx@xxx.xx\"</span></span><br></pre></td></tr></table></figure>\n<p>如果须有某个文件夹下单独配置，–global改为–local即可</p>\n<h1 id=\"三、搭建博客开启写作之旅\"><a href=\"#三、搭建博客开启写作之旅\" class=\"headerlink\" title=\"三、搭建博客开启写作之旅\"></a>三、搭建博客开启写作之旅</h1><h3 id=\"搭建流程\"><a href=\"#搭建流程\" class=\"headerlink\" title=\"搭建流程\"></a>搭建流程</h3><p>​    Hexo搭建博客后部署到Github，如果我们需要把我们原始文件也存到Github便于我们后续在不同电脑更改，理论上我们需要一个库部署，一个库来存储我们的原始文件。这里我们通过建立不同的分支来实现。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:xxx/xxx.github.io.git</span><br><span class=\"line\">$ git branch hexo</span><br><span class=\"line\">$ git checkout hexo</span><br></pre></td></tr></table></figure>\n<p>​    我们可以把hexo分支设置为默认分支，打开项目的settings-&gt;Branches-&gt;Default Branch更改即可。因为后续更改只会发生在hexo分支，master分支仅起部署作用。</p>\n<p>接着，我们操作Hexo：</p>\n<p>于hexo分支下，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init  <span class=\"comment\">#只有空文件夹时需要这句代码</span></span><br><span class=\"line\">$ npm install hexo-deployer-git</span><br><span class=\"line\">$ hexo g  <span class=\"comment\">#generate,生成静态网页</span></span><br><span class=\"line\">$ hexo s  <span class=\"comment\">#server,本地预览http://localhost:4000/</span></span><br></pre></td></tr></table></figure>\n<p>博客的配置文件为_config.yml，关于部署的配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:xxx/xxx.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>其他配置参考注释。。</p>\n<p>重新生成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$hexo</span> clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d  <span class=\"comment\">#deploy</span></span><br></pre></td></tr></table></figure>\n<p>此时，打开<a href=\"https://xxx.github.io/\" target=\"_blank\" rel=\"noopener\">https://xxx.github.io/</a>即可访问博客。</p>\n<p>开启写作之旅：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo n <span class=\"string\">\"xxx\"</span>  <span class=\"comment\">#new,命令执行后，在/source/_posts下回产生一个xxx.md文件</span></span><br></pre></td></tr></table></figure>\n<p>修改完后，push到hexo分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">$ git push origin hexo  <span class=\"comment\">#-f强行push</span></span><br></pre></td></tr></table></figure>\n<p>如需在其他机器写作，git clone下来即可</p>\n<h3 id=\"坑点记录\"><a href=\"#坑点记录\" class=\"headerlink\" title=\"坑点记录\"></a>坑点记录</h3><ul>\n<li><p><strong>修改配置_config.yml文件时，记得配置项之前加空格</strong></p>\n<p>比如：title: <em>&lt;-这个地方必须有空格</em>Pamper’Blog</p>\n</li>\n<li><p>当我们在多台机器上修改博客，产生修改不一致的情况时，可以强制某台机器本地同步git上的代码：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch --all</span><br><span class=\"line\">$ git reset --hard origin/hexo</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加.gitignore忽略某些文件，如.DS_Store，.deploy_git，如果发现.gitignore没起作用，清除一下git缓存即可：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm -r --cached .</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"update .gitignore\"</span></span><br><span class=\"line\">$ git push origin hexo</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、主题配置\"><a href=\"#四、主题配置\" class=\"headerlink\" title=\"四、主题配置\"></a>四、主题配置</h1><p>​    配置文件_config.yml中有主题配置选项theme，将心仪的主题clone到themes文件夹下，修改配置重新部署即可应用主题，主题基本配置同样主题文件夹下的 _config.yml配置。</p>\n<p>​    本博客采用<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">yilia</a>主题</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjl3xtj2p0000sc44s286ng35","tag_id":"cjl3xtj2x0002sc44m9h895rr","_id":"cjl3xtj320007sc449p5jzv73"},{"post_id":"cjl3xtj2p0000sc44s286ng35","tag_id":"cjl3xtj300003sc44ni4v88sr","_id":"cjl3xtj330008sc44x6tv4ahe"},{"post_id":"cjl3xtj2p0000sc44s286ng35","tag_id":"cjl3xtj300004sc44q6wllz1y","_id":"cjl3xtj33000asc44pv4b8vgb"},{"post_id":"cjl3xtj2p0000sc44s286ng35","tag_id":"cjl3xtj310005sc440gv4tmca","_id":"cjl3xtj33000bsc44kx04ifvt"},{"post_id":"cjl3xtj2t0001sc44uzhcss4c","tag_id":"cjl3xtj320006sc44fhugoqdc","_id":"cjl3xtj34000dsc44r2ql5yto"},{"post_id":"cjl3xtj2t0001sc44uzhcss4c","tag_id":"cjl3xtj330009sc440zjv2k87","_id":"cjl3xtj34000esc44u4jdvzkk"},{"post_id":"cjl3xtj2t0001sc44uzhcss4c","tag_id":"cjl3xtj33000csc441egmxupr","_id":"cjl3xtj34000fsc44bzclpahr"}],"Tag":[{"name":"coding","_id":"cjl3xtj2x0002sc44m9h895rr"},{"name":"Java","_id":"cjl3xtj300003sc44ni4v88sr"},{"name":"Python","_id":"cjl3xtj300004sc44q6wllz1y"},{"name":"排序算法","_id":"cjl3xtj310005sc440gv4tmca"},{"name":"notes","_id":"cjl3xtj320006sc44fhugoqdc"},{"name":"Github Pages","_id":"cjl3xtj330009sc440zjv2k87"},{"name":"Hexo","_id":"cjl3xtj33000csc441egmxupr"}]}}